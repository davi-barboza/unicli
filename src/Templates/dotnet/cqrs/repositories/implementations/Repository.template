using {namespace}.Interfaces;
using {namespace}.Entities;

namespace {namespace}.Implementations;

public class Repository<TEntity>(
    DBContext dbContext,
    ) : ReadOnlyRepository<TEntity>(dbContext),
    IRepository<TEntity> where TEntity : Entity
{
    public async Task AddAsync(TEntity entity, CancellationToken cancellationToken = default)
    {
        await Set.AddAsync(entity, cancellationToken);
    }

    public async Task UpdateAsync(TEntity entity, CancellationToken cancellationToken = default)
    {
        await Task.Run(() =>
        {
            Set.Update(entity);
        }, cancellationToken);
    }

    public async Task DeleteAsync(TEntity entity, CancellationToken cancellationToken = default)
    {
        await Task.Run(() =>
        {
            Set.Remove(entity);
        }, cancellationToken);
    }
}
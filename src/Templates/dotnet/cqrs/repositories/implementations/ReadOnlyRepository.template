using Microsoft.EntityFrameworkCore;
using {namespace}.Interfaces;
using {namespace}.Entities;

namespace {namespace}.Implementations;

public class ReadOnlyRepository<TEntity>(
    DBContext dbContext
    ) : RepositoryProperties<TEntity>(dbContext), IReadOnlyRepository<TEntity> where TEntity : Entity
{
    public async Task<TEntity?> GetByIdAsync(int id, CancellationToken cancellationToken = default)
    {
        return await SetAsNoTracking.SingleOrDefaultAsync(x => x.Id == id, cancellationToken);
    }

    public async Task<IReadOnlyList<TEntity>> GetAllAsync(CancellationToken cancellationToken = default)
    {
        return await SetAsNoTracking.ToListAsync(cancellationToken);
    }
}

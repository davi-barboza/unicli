using AutoMapper;
using {namespace}.Dtos;
using {namespace}.Commands;
using {namespace}.Commands;
using {namespace}.Entities;

namespace SampleProject.Application;

public static class {name}Mapper
{
    public static {name}Dto ToDto(this {name}Entity input)
    {
        var config = new MapperConfiguration(cfg =>
            cfg.CreateMap<{name}, {name}Dto>());

        var mapper = new Mapper(config);

        return mapper.Map<{name}Dto>(input);
    }

    public static IReadOnlyList<{name}Dto> ToDto(this IReadOnlyList<{name}Entity> input)
    {
        var config = new MapperConfiguration(cfg =>
            cfg.CreateMap<{name}Entity, {name}Dto>());

        var mapper = new Mapper(config);

        return mapper.Map<IReadOnlyList<{name}Dto>>(input);
    }

    public static {name} ToEntity(this Create{name}Command input)
    {
        var config = new MapperConfiguration(cfg =>
            cfg.CreateMap<Create{name}Command, {name}Entity>());

        var mapper = new Mapper(config);

        return mapper.Map<{name}Entity>(input);
    }

    public static {name} ToEntity(this Update{name}Command input, {name}Entity entity)
    {
        var config = new MapperConfiguration(cfg =>
            cfg.CreateMap<Update{name}Command, {name}Entity>());

        var mapper = new Mapper(config);

        return mapper.Map(input, entity);
    }
}

using {namespace}.Features;
using {namespace}.Dtos;
using {namespace}.Interfaces;

namespace {namespace}.Queries;

public class Get{name}ByIdQueryHandler(IProjectUnitOfWork unitOfWork) : ICommandQueryHandler<Get{name}ByIdQuery, {name}Dto>
{
    public async Task<Result<{name}Dto>> Handle(Get{name}ByIdQuery request, CancellationToken cancellationToken)
    {
        var existEntity = await unitOfWork.{name}Repository.GetByIdAsync(request.Id, cancellationToken)
            ?? throw new Exception("Not Found");

        var dto = existEntity.ToDto(); // Mapper

        var result = new Result<{name}Dto>();
        result.AddValue(dto);
        result.OK();
        return result;
    }

    public async Task<Result<IReadOnlyList<{name}Dto>>> Handle(GetAll{name}Query request, CancellationToken cancellationToken)
    {
        var entities = await unitOfWork.{name}Repository.GetAllAsync(cancellationToken);
        var dtos = entities.ToDto();

        var result = new Result<IReadOnlyList<{name}Dto>>();
        result.AddValue(dtos);
        result.OK();
        return result;
    }
}